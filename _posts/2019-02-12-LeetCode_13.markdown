---
layout:     post
title:      "「LeetCode」——「13」—— Roman to Integer"
subtitle:   " 记录打码。 "
date:       2019-02-12 
author:     "LeeHW"
header-img: "img/post-bg-rwd.jpg"
catalog: true
tags:
    - LeetCode_Easy
---

## 题目

Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`.

```
Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
```

For example, two is written as `II` in Roman numeral, just two one's added together. Twelve is written as, `XII`, which is simply `X`+ `II`. The number twenty seven is written as `XXVII`, which is `XX` + `V` + `II`.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:

- `I` can be placed before `V` (5) and `X`(10) to make 4 and 9. 
- `X` can be placed before `L` (50) and `C` (100) to make 40 and 90. 
- `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.

Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.

| Example |  Input  | Output |
| :-----: | :-----: | :----: |
| Case_1  |   III   |   3    |
| Case_2  |   IV    |   4    |
| Case_3  |   IX    |   9    |
| Case_4  |  LVIII  |   58   |
| Case_5  | MCMXCIV |  1994  |



---

## 代码

```c++
#include<unordered_map>
using namespace std;
class Solution {
public:
    int romanToInt(string s) {
        int res = 0;
        unordered_map<char, int> m{{'I', 1}, {'V', 5}, {'X', 10}, {'L', 50}, {'C', 100}, {'D', 500}, {'M', 1000}};
        for (int i = 0; i < s.size(); ++i) {
            int val = m[s[i]];
            if (i == s.size() - 1 || m[s[i+1]] <= m[s[i]]) res += val;
            else res -= val;
        }
        return res;
    }
};
```



---

## 结语

分为以下2种方法：

①如果当前数字是最后一个数字，或者之后的数字比它小的话，则加上当前数字。

②其他情况则减去这个数字。

------

## 补充知识

#### 需要引入的头文件不同

map: 			#include < map >
unordered_map:     #include < unordered_map >

#### 内部实现机理不同

**map：** map内部实现了一个红黑树（红黑树是非严格平衡二叉搜索树，而AVL是严格平衡二叉搜索树），红黑树具有自动排序的功能，因此map内部的所有元素都是有序的，红黑树的每一个节点都代表着map的一个元素。因此，对于map进行的查找，删除，添加等一系列的操作都相当于是对红黑树进行的操作。map中的元素是按照二叉搜索树（又名二叉查找树、二叉排序树，特点就是左子树上所有节点的键值都小于根节点的键值，右子树所有节点的键值都大于根节点的键值）存储的，使用中序遍历可将键值按照从小到大遍历出来。
**unordered_map: **unordered_map内部实现了一个哈希表（也叫散列表，通过把关键码值映射到Hash表中一个位置来访问记录，查找的时间复杂度可达到O(1)，其在海量数据处理中有着广泛应用）。因此，其元素的排列顺序是无序的。哈希表详细介绍

#### 优缺点以及适用处

map：

​	**优点**：

​	有序性，这是map结构最大的优点，其元素的有序性在很多应用中都会简化很多的操作
红黑树，内部实现一个红黑书使得map的很多操作在lgn的时间复杂度下就可以实现，因此效率非常的高
缺点： 空间占用率高，因为map内部实现了红黑树，虽然提高了运行效率，但是因为每一个节点都需要额外保存父节点、孩子节点和红/黑性质，使得每一个节点都占用大量的空间

​	**适用处**：对于那些有顺序要求的问题，用map会更高效一些

unordered_map：

​	**优点**： 因为内部实现了哈希表，因此其查找速度非常的快
​	**缺点**： 哈希表的建立比较耗费时间
​	**适用处**：对于查找问题，unordered_map会更加高效一些，因此遇到查找问题，常会考虑一下用unordered_map

#### 总结：

①内存占有率的问题就转化成红黑树 VS hash表 , 还是unorder_map占用的内存要高。
②但是unordered_map执行效率要比map高很多

③对于unordered_map或unordered_set容器，其遍历顺序与创建该容器时输入的顺序不一定相同，因为遍历是按照哈希表从前往后依次遍历的

## **参考**

【1】c++中map与unordered_map的区别
<http://blog.csdn.net/batuwuhanpei/article/details/50727227>