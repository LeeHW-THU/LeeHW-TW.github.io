---
layout:     post
title:      "「LeetCode」——「1」——Two Sum"
subtitle:   " 记录打码。 "
date:       2019-02-09 
author:     "LeeHW"
header-img: "img/post-bg-digital-native.jpg"
catalog: true
tags:
    - LeetCode_Easy
---

## 题目



Given an array of integers, return indices of the two numbers such that they add up to a specific target.



You may assume that each input would have exactly one solution, and you may

not use the same element twice.



| Example                                 |
| --------------------------------------- |
| Given nums = [2, 7, 11, 15], target = 9 |



Because nums[0] + nums[1] = 2 + 7 = 9,

return [0, 1].

---

## 代码

#### ①	解法一：暴力

```c++
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> flag;
        for(int i = 0; i < nums.size(); i++)
        {
            for(int j = i+1; j < nums.size(); j++)
            {
                if((nums[i]+nums[j])==target)
                {
                    flag.push_back(i);
                    flag.push_back(j);
                }
            }
            
        }
        return flag;
    }
};
```

#### ②	解法二：二分法——空间换时间

```c++
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> copy=nums;
        int L=0,R=copy.size()-1; 
        int ans1=0,ans2=0;//nums里答案的下标
        vector<int> flag;// 答案
        sort(copy.begin(),copy.end());//样本是乱序的，先排序一下
        while(L<R)
        {
            if((copy[L]+copy[R])==target)
            {
                ans1=copy[L];
                ans2=copy[R];
                break;
            }
            else if((copy[L]+copy[R])>target)
            {
                R--;
            }
            else if((copy[L]+copy[R])<target)
            {
                L++;
            }
        }
        //在nums查找下标（copy排过序了）
        for(int i=0;i<nums.size();i++){
            if(nums[i]==ans1||nums[i]==ans2)
            {
                flag.push_back(i);
            }
        }
        return flag;
    }
};
```



---

## 结语

暴力2层循环当然效率垃圾啦。。

使用二分法用空间换时间，也可以使用hash方法。效率差不多




