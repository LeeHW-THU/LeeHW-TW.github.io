---
layout:     post
title:      "C++基础知识整理（持续更新）"
subtitle:   " 记录打码。 "
date:       2019-03-09 
author:     "LeeHW"
header-img: "img/post-bg-digital-native.jpg"
catalog: true
tags:
    - C++基础知识
---

(——————可在右侧跳转标题内容——————→)

------

## Online Judge评测结果

##### （1）答案正确（Accept，所谓AC）

​		这应该是大家最喜欢见到的，恭喜你！提交的代码通过了所有的测试数据。

##### （2）编译错误（Compile Error，所谓CE）

​		提交的代码未通过编译。首先要注意是不是选错了语言，然后再使用本地的编译器（IDE）试试能不能编译刚刚所提交的代码，修改之后再提交即可。

##### （3）答案错误（Wrong Answer，所谓WA）

​		说明提交的代码有漏洞或者算法根本就是错误的（也有可能是多输出了一些调试信息导致，删掉即可），大部分的情况下需要检查代码的逻辑有没有问题。

##### （4）运行超时（Time Limit Exceeded，所谓TLE）

​		超出题目运行时间上限就会返回TLE，一般都是算法的`时间复杂度`过大而导致的，也有可能是某组数据使得代码某地方`死循环`了。

##### （5）运行错误（Runtime Error，所谓RE）

​		可能性非常多

​			①有段错误（非法访问内存，例如数组越界、指针乱指）

​			②浮点错误（例如除数为0、模数为0）

​			③递归爆栈（一般由递归时层数过深）

​		要仔细检查一下代码。

##### （6）内存超限（Memory Limit Exceeded，所谓MLE）

​		超出题目规定使用的空间上限，例如数组太大一般最容易导致这个结果。

##### （7）格式错误（Presentation Error，所谓PE）

​		应该是最接近AC的结果了，一般都是多输出了空格or换行导致的，稍作修改即可。

##### （8）输出超限（Output Limit Exceeded，所谓OLE）

​		代码输出过量内容（非常多），一般是由输出了大量的调试信息或者特殊数据导致的死循环输出导致的。

------

## 基本数据类型

##### 一、整型

###### 	有符号整型

​		编程时直接定义int、short、long、long long等类型时默认都是有符号整型，表格如下：

​		

| 类型         | 定义   | 大小               |                 范围                  | 有无符号位        |
| ------------ | ------ | ------------------ | :-----------------------------------: | ----------------- |
| char         | 字符型 | 1 Byte             |               -128~127                | 有符号（GCC编译） |
| short（int） | 短整型 | 2 Byte             |    -32768～32767  （-2^15~2^15-1）    | 有符号            |
| int          | 整型   | 4 Byte             | -2147483648~2147483647 (-2^31~2^31-1) | 有符号            |
| long         | 长整型 | 8 Byte（64位系统） | -2147483648~2147483647 (-2^31~2^31-1) | 有符号            |
| long long    | 长整型 | 8 Byte             |            (-2^63~ 2^63-1)            | 有符号            |

bool类型是特殊的整型，其占一个字节，只有0（false）和1（true）两种取值。



###### 	无符号整型

​		在有符号整型的前面加上unsigned即为相应的无符号整型，表格如下：

| 类型                | 定义         | 大小               | 范围                       | 有无符号位 |
| ------------------- | ------------ | ------------------ | -------------------------- | ---------- |
| unsigned char       | 无符号字符型 | 1 Byte             | 0 ~ 255                    | 无符号     |
| unsigned short(int) | 无符号短整型 | 2 Byte             | 0 ~ 65535(0 ~ 2^16-1)      | 无符号     |
| unsigned int        | 无符号整形   | 4 Byte             | 0 ~ 4294967295(0 ~ 2^32-1) | 无符号     |
| unsigned long       | 无符号长整型 | 8 Byte（64位系统） | 0 ~ 4294967295(0 ~ 2^32-1) | 无符号     |
| unsigned long long  | 无符号长整型 | 8 Byte             | (0~2^64-1)                 | 无符号     |

##### 二、浮点型

| 类型        | 定义       | 大小   | 范围                                | 备注         |
| ----------- | ---------- | ------ | ----------------------------------- | ------------ |
| float       | 单精度型   | 4 Byte | 数字介于 ±3.4E-38 和 ±3.4E38 之间   | 7位有效数字  |
| double      | 双精度型   | 8 Byte | 数字介于 ±1.7E-308 和 ±1.7E308 之间 | 16位有效数字 |
| long double | 长双精度型 | 8 Byte | 数字介于 ±1.7E-308 和 ±1.7E308 之间 | 16位有效数字 |

##### 三、字符型

| 类型     | 含义        | 该类型数据所占的最小比特位数 |
| -------- | ----------- | ---------------------------- |
| char     | 字符        | 8位（即可表示28个字符）      |
| wchar_t  | 宽字符      | 16位                         |
| char16_t | Unicode字符 | 16位                         |
| char32_t | Unicode字符 | 32位                         |

##### 四、布尔型

| 类型 | 范围                  |
| ---- | --------------------- |
| bool | 0（false）、1（true） |

------

## 运算符

##### 一、算数运算符

| 符号 | 名称       | 作用                             |
| :--: | ---------- | -------------------------------- |
|  +   | 加法运算符 | 前后两个数相加                   |
|  -   | 减法运算符 | 前后两个数相减                   |
|  *   | 乘法运算符 | 前后两个数相乘                   |
|  /   | 除法运算符 | 取前面的数除以后面的数得到的商   |
|  %   | 取模运算符 | 取前面的数除以后面的数得到的余数 |
|  ++  | 自增运算符 | 令一个整型变量增加1              |
|  --  | 自减运算符 | 令一个整型变量减少1              |

###### 	i++与++i的区别

​		i++：**先使用i再将i加1**

​		++i：**先将i加1再使用i**

##### 二、关系运算符

| 运算符 |   含义   | 语法 |            返回值             |
| :----: | :------: | :--: | :---------------------------: |
|   <    |   小于   | a<b  | 真（1，true）、假（0，false） |
|   >    |   大于   | a>b  | 真（1，true）、假（0，false） |
|   <=   | 小于等于 | a<=b | 真（1，true）、假（0，false） |
|   >=   | 大于等于 | a>=b | 真（1，true）、假（0，false） |
|   ==   |   等于   | a==b | 真（1，true）、假（0，false） |
|   !=   |  不等于  | a!=b | 真（1，true）、假（0，false） |

##### 三、逻辑运算符

| 运算符 | 含义 |  语法  |                 返回值                 |
| :----: | :--: | :----: | :------------------------------------: |
|   &&   |  与  |  a&&b  |   ab都真，则返回真。其他情况返回假。   |
|  \|\|  |  货  | a\|\|b |   ab都假，则返回假。其他情况返回真。   |
|   ！   |  非  |   !a   | 若a为真，则返回真。若a为假，则返回假。 |



##### 四、条件运算符

​	称为三元运算符（ A ? B : C ; ）

​	例子：a = 3 , b = 5

​		   c = a > b ? 7 : 11 ;

​		(解释：若a>b为真，则返回7。若a>b为假，则返回11。)

##### 五、位运算符

| 运算符 |  含义  | 语法 | 效果                                      |
| :----: | :----: | :--: | ----------------------------------------- |
|   <<   |  左移  | a<<x | 整数a按二进制位左移x位                    |
|   >>   |  右移  | a>>x | 整数a按二进制位右移x位                    |
|   &    |  位与  | a&b  | 整数a和b按二进制对齐，按位进行`与`运算    |
|   \|   |  位或  | a\|b | 整数a和b按二进制对齐，按位进行`或`运算    |
|   ^    | 位异或 | a^b  | 整数a和b按二进制对齐，按位进行`异或`运算  |
|   ~    | 位取反 |  ~a  | 整数a的二进制的每一位进行0变1、1变0的操作 |

------

